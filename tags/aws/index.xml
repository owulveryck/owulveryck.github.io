<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>aws on Unladen swallow - Olivier Wulveryck</title><link>https://owulveryck.github.io/tags/aws/</link><description>Recent content in aws on Unladen swallow - Olivier Wulveryck</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Olivier Wulveryck</copyright><lastBuildDate>Wed, 22 Mar 2017 09:15:35 +0100</lastBuildDate><atom:link href="https://owulveryck.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>Playing with Facebook&#39;s GraphQL (applied to AWS products and offers management)</title><link>https://owulveryck.github.io/2017/03/22/playing-with-facebooks-graphql-applied-to-aws-products-and-offers-management/</link><pubDate>Wed, 22 Mar 2017 09:15:35 +0100</pubDate><guid>https://owulveryck.github.io/2017/03/22/playing-with-facebooks-graphql-applied-to-aws-products-and-offers-management/</guid><description>About GraphQL GraphQL has been invented by Facebook for the purpose of refactoring their mobile application. Facebook had reached the limits of the standard REST API mainly because:
Getting that much information was requiring a huge amount of API endpoints The versioning of the API was counter-productive regarding Facebook&amp;rsquo;s frequents deployements. But graphql is not only a query language related to Facebook. GraphQL is not only applicable to social data.</description></item><item><title>A foot in NoSQL and a toe in big data</title><link>https://owulveryck.github.io/2017/01/13/a-foot-in-nosql-and-a-toe-in-big-data/</link><pubDate>Fri, 13 Jan 2017 22:22:46 +0100</pubDate><guid>https://owulveryck.github.io/2017/01/13/a-foot-in-nosql-and-a-toe-in-big-data/</guid><description>The more I work with AWS, the more I understand their models. This goes far beyond the technical principles of micro service. As an example I recently had an opportunity to dig a bit into the billing process. I had an explanation given by a colleague whose understanding was more advanced than mine. In his explanation, he mentioned this blog post: New price list API.
Understanding the model By reading this post and this explanation, I understand that the offers are categorized in families (eg AmazonS3) and that an offer is composed of a set of products.</description></item><item><title>Image reKognition with a webcam, go and AWS.</title><link>https://owulveryck.github.io/2016/12/16/image-rekognition-with-a-webcam-go-and-aws./</link><pubDate>Fri, 16 Dec 2016 14:51:18 +0100</pubDate><guid>https://owulveryck.github.io/2016/12/16/image-rekognition-with-a-webcam-go-and-aws./</guid><description>It&amp;rsquo;s been a while since I last posted something. I will fill the gap with a quick post about rekognition.
rekognition is a service from AWS that is described as:
Deep learning-based image recognition
Search, verify, and organize millions of images
In this light post, I will present a simple method to grab a picture from my webcam, send it to rekognition and display the result.
The part of the result I will focus on is the emotion.</description></item></channel></rss>